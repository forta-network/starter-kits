import agent
from forta_bot import create_transaction_event, FindingType,  FindingSeverity, create_block_event
from unittest.mock import patch
import pytest
from datetime import datetime

web3 = {}

class TestExploiterAddressTxBot:
    
    # @pytest.mark.asyncio
    # async def test_returns_empty_findings_if_no_blocklisted_address(self):
    #     tx_event = create_transaction_event(
    #         transaction = {
    #             "hash": "0x123",
    #             "from": "0x9c1aec4fa72b7c3ff135999b2087868ec85d9ee2"
    #         },
    #         block = {
    #             'number': 1
    #         },
    #         chain_id = 1
    #     )
    #     await agent.initialize()
    #     findings = await agent.handle_transaction(tx_event, web3)
    #     assert len(findings) == 0

    #     block_event = create_block_event(
    #         block = {
    #             "number": 1,
    #             "hash": "0x456",
    #             "timestamp": datetime(2023,11,1,0,30,0).timestamp(),
    #             "transactions": []
    #         },
    #         chain_id = 1
    #     )

    #     findings = await agent.handle_block(block_event, web3)
    #     assert len(findings) == 0

    @pytest.mark.asyncio
    async def test_returns_finding_if_blocklisted_address_in_tx(self):
        blocklisted_address = "0x1fcdb04d0c5364fbd92c73ca8af9baa72c269107"
        blocklist_label = "BadgerDAO Exploiter"
        expected_description = f"Transaction involving an exploiter address: {blocklisted_address} with label: {blocklist_label}"
        tx_event = create_transaction_event(
            transaction = {
                "hash": "0x123",
                "from": blocklisted_address
            },
            block = {
                'number': 1
            },
            chain_id = 1
        )

        await agent.initialize()
        findings = await agent.handle_transaction(tx_event, web3)

        assert len(findings) == 0

        block_event = create_block_event(
            block = {
                "number": 1,
                "hash": "0x456",
                "timestamp": datetime(2023,11,1,0,30,0).timestamp(),
                "transactions": []
            },
            chain_id = 1
        )
        findings = await agent.handle_block(block_event, web3)
        assert len(findings) == 1

        finding = findings[0]
        assert finding.name == "Exploiter Address"
        assert finding.description == expected_description
        assert finding.alert_id == "EXPLOITER-ADDR-TX"
        assert finding.type == FindingType.Suspicious
        assert finding.severity == FindingSeverity.High
        assert finding.metadata["exploiter_address"] == blocklisted_address
        assert finding.metadata["blocklist_label"] == blocklist_label
        assert finding.metadata["labels_source"] == "etherscan"

