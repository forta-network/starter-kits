from forta_agent import FindingSeverity

from src.config import DEFAULT_THRESHOLDS, L2_THRESHOLDS


def extract_argument(event: dict, argument: str) -> any:
    """
    the function extract specified argument from the event
    :param event: dict
    :param argument: str
    :return: argument value
    """
    return event.get('args', {}).get(argument, "")


def get_full_info(object_inst):
    values = vars(object_inst)
    values['block'] = vars(values['block'])
    values['logs'] = [vars(log) for log in values['logs']]
    values['traces'] = [vars(trace) for trace in values['traces']]
    values['transaction'] = vars(values['transaction'])

    return values


def get_severity(usd, chain_id):
    if chain_id in [42161, 10]:
        thresholds = L2_THRESHOLDS
    else:
        thresholds = DEFAULT_THRESHOLDS

    if usd >= thresholds["FUNDING_CRITICAL"]:
        return FindingSeverity.Critical
    elif usd >= thresholds["FUNDING_HIGH"]:
        return FindingSeverity.High
    elif usd >= thresholds["FUNDING_MEDIUM"]:
        return FindingSeverity.Medium
    elif usd >= thresholds["FUNDING_LOW"]:
        return FindingSeverity.Low
    else:
        return FindingSeverity.Info


def get_severity_laundering(usd, chain_id):
    if chain_id in [42161, 10]:
        thresholds = L2_THRESHOLDS
    else:
        thresholds = DEFAULT_THRESHOLDS

    if usd >= thresholds["LAUNDERING_CRITICAL"]:
        return FindingSeverity.Critical
    elif usd >= thresholds["LAUNDERING_HIGH"]:
        return FindingSeverity.High
    elif usd >= thresholds["LAUNDERING_MEDIUM"]:
        return FindingSeverity.Medium
    elif usd >= thresholds["LAUNDERING_LOW"]:
        return FindingSeverity.Low
    else:
        return FindingSeverity.Info


def calculate_anomaly_score(alert_count: int, total_transactions: int) -> float:
    """
    Calculate the anomaly score based on the number of alerts generated, the total number of transactions, and
    the severity of the alerts.

    @return: The anomaly score
    :param total_transactions: total amount of transactions in scope
    :param alert_count: the counts of alerts generated by severity level

    """

    anomaly_score = alert_count / total_transactions
    return min(anomaly_score, 1.0)
